import requests
import logging
import uuid
import time
import asyncio
from datetime import datetime, timedelta, timezone
from app.config import YANDEX_API_KEY, YANDEX_BASE_URL
from services.amocrm_service import update_lead_status_in_amocrm, add_note_to_amocrm

def format_phone(number):
    # Check if the number starts with '7' or '8' and drop the first digit
    if len(number) == 11 and (number.startswith("7") or number.startswith("8")):
        number = number[1:]
    return f"+7 {number[:3]} {number[3:6]} {number[6:8]} {number[8:]}"

def create_yandex_delivery(parsed_order, lead_id):
    """
    Creates a delivery order in Yandex using the parsed order from AmoCRM.
    """
    try:
        request_id = str(uuid.uuid4())
        url = f"{YANDEX_BASE_URL}/claims/create?request_id={request_id}"
        headers = {
            "Authorization": f"Bearer {YANDEX_API_KEY}",
            "Accept-Language": "ru",
            "Content-Type": "application/json"
        }

        courier_phone = format_phone(parsed_order.get("courier_phone"))
        customer_phone = format_phone(parsed_order.get("phone"))
        customer_name = parsed_order.get("name")

        address = parsed_order.get("address", "")
        parts = address.split(", ")

        street = parts[0] if len(parts) > 0 else ""
        building = parts[1] if len(parts) > 1 else ""
        porch = parts[2] if len(parts) > 2 else None
        floor = parts[3] if len(parts) > 3 else None
        apartment = parts[4] if len(parts) > 4 else None

        prep_time = int(parsed_order.get("prep_time", 0))
        due_time = datetime.now(timezone.utc) + timedelta(minutes=prep_time)
        due = due_time.strftime("%Y-%m-%dT%H:%M:%S+00:00")

        excluded_items = ["–ö–µ—Ç—á—É–ø", "–°—ã—Ä–Ω—ã–π —Å–æ—É—Å", "–û—Å—Ç—Ä—ã–π —Å–æ—É—Å", "–•–∞–ª–∞–ø–µ–Ω—å–æ", "–•–ª–µ–± 4—à—Ç"]
        items = [
        {
            "title": item.get("name", "–≥–æ—Ä—è—á–∞—è –µ–¥–∞"),
            "cost_currency": "KZT",
            "cost_value": str(item.get("price", 1)),
            "quantity": item.get("quantity", 1),
            "pickup_point": 1,
            "dropoff_point": 2
        }
        for item in parsed_order.get("menu", [])
        if item.get("name") not in excluded_items  # Exclude specified items
        ]

        route_point_2 = {
            "skip_confirmation": True,
            "point_id": 2,
            "type": "destination",
            "address": {
                "fullname": f"–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ê—Å—Ç–∞–Ω–∞, {street}, {building}" if porch is None else f"–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ê—Å—Ç–∞–Ω–∞, {street}, {building}, {porch}",
                "country": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
                "city": "–ê—Å—Ç–∞–Ω–∞",
                "street": street,
                "building": building
            },
            "contact": {
                "name": customer_name,
                "phone": customer_phone
            },
            "visit_order": 2
        }

        if porch:
            route_point_2["address"]["porch"] = porch
        if floor:
            route_point_2["address"]["sfloor"] = floor
        if apartment:
            route_point_2["address"]["sflat"] = apartment

        order_data = {
            "items": items,
            "route_points": [
                {
                    "skip_confirmation": True,
                    "point_id": 1,
                    "type": "source",
                    "address": {
                        "fullname": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ê—Å—Ç–∞–Ω–∞, –ø—Ä–æ—Å–ø–µ–∫—Ç –¢—É—Ä–∞–Ω, 24, Italita",
                        "country": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
                        "city": "–ê—Å—Ç–∞–Ω–∞",
                        "street": "–ø—Ä–æ—Å–ø–µ–∫—Ç –¢—É—Ä–∞–Ω",
                        "building": "24"
                    },
                    "comment": "–†–µ—Å—Ç–æ—Ä–∞–Ω Italita",
                    "contact": {
                        "name": "Italita",
                        "phone": courier_phone
                    },
                    "visit_order": 1
                },
                route_point_2
            ],
            "client_requirements": {
                "taxi_class": "courier",
                "cargo_options": ["thermobag"],
                "pro_courier": False
            },
            "delivery_description": "–î–æ—Å—Ç–∞–≤–∫–∞ –≥–æ—Ä—è—á–µ–π –µ–¥—ã",
            "recipient_info": {
                "phone": customer_phone,
                "name": customer_name
            },
            "skip_door_to_door": False,
            "due": due,
            "auto_accept": False
        }

        response = requests.post(url, json=order_data, headers=headers)
        response.raise_for_status()
        logging.info("‚úÖ Yandex delivery order created successfully.")
        add_note_to_amocrm(lead_id, "–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –Ø–Ω–¥–µ–∫—Å, –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "Yandex")
        return response.json().get("id")

    except requests.RequestException as e:
        logging.error(f"‚ùå Network error while creating Yandex delivery: {str(e)}")
        add_note_to_amocrm(lead_id, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –Ø–Ω–¥–µ–∫—Å", "Yandex")
        return None
    except Exception as e:
        logging.error(f"‚ùå Exception while creating Yandex delivery: {str(e)}")
        add_note_to_amocrm(lead_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –Ø–Ω–¥–µ–∫—Å", "Yandex")
        return None

def get_yandex_delivery_status(claim_id):
    """
    Retrieves the status of a Yandex delivery order.
    """
    try:
        url = f"{YANDEX_BASE_URL}/claims/info?claim_id={claim_id}"
        headers = {
            "Authorization": f"Bearer {YANDEX_API_KEY}",
            "Accept-Language": "ru"
        }
        response = requests.post(url, headers=headers)
        response.raise_for_status()
        status = response.json().get("status")
        logging.info(f"‚ÑπÔ∏è Yandex delivery order status: {status}")
        return status
    except requests.RequestException as e:
        logging.error(f"‚ùå Network error while fetching Yandex delivery status: {str(e)}, response: {response.text}")
        return None
    except Exception as e:
        logging.error(f"‚ùå Unexpected error while fetching Yandex delivery status: {str(e)}")
        return None

def accept_yandex_delivery(claim_id, lead_id, version=1):
    """
    Accepts a Yandex delivery order.
    """
    try:
        url = f"{YANDEX_BASE_URL}/claims/accept?claim_id={claim_id}"
        headers = {
            "Authorization": f"Bearer {YANDEX_API_KEY}",
            "Accept-Language": "ru",
            "Content-Type": "application/json"
        }
        response = requests.post(url, json={"version": version}, headers=headers)
        response.raise_for_status()
        logging.info(f"üöö Delivery {claim_id} has been accepted.")
        add_note_to_amocrm(lead_id, f"–î–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º –∫—É—Ä—å–µ—Ä–∞...", "Yandex")
        yandex_cargo_link = "https://delivery.yandex.kz/account/cargo"
        add_note_to_amocrm(lead_id, f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞ Yandex Cargo: {yandex_cargo_link}")
        logging.info(f"üîó Yandex Cargo tracking link sent: {yandex_cargo_link}")
        return True
    except requests.RequestException as e:
        logging.error(f"‚ùå Network error while accepting Yandex delivery: {str(e)}")
        return False
    except Exception as e:
        logging.error(f"‚ùå Exception while accepting Yandex delivery: {str(e)}")
        return False

def get_yandex_tracking_links(claim_id):
    """
    Retrieves tracking links for the Yandex delivery order.
    Returns the tracking links if available, otherwise None.
    """
    url = f"{YANDEX_BASE_URL}/claims/tracking_links?claim_id={claim_id}"
    headers = {
        "Authorization": f"Bearer {YANDEX_API_KEY}",
        "Accept-Language": "ru"
    }

    try:
        response = requests.get(url, headers=headers)
        response_data = response.json()
        tracking_links = response_data.get("tracking_links")
        if tracking_links:
            logging.info("‚úÖ Yandex tracking links retrieved successfully.")
            return tracking_links
        else:
            logging.warning("‚ö†Ô∏è No tracking links available for the given claim_id.")
            return None
    except Exception as e:
        logging.error(f"‚ùå Exception while fetching Yandex tracking links: {str(e)}")
        return None
    
async def track_yandex_delivery(claim_id, lead_id):
    MAX_RETRIES = 20
    WAIT_TIME = 60

    for attempt in range(MAX_RETRIES):
        try:
            status = get_yandex_delivery_status(claim_id)

            # Fetch courier info if the status indicates a courier is assigned or in progress
            if status in ["performer_found", "pickup_arrived", "pickup_finished", "delivering"]:
                logging.info(f"‚úÖ Status '{status}' for delivery {claim_id}. Attempting to get courier info.")
                add_note_to_amocrm(lead_id, f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {status}. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞.", "Yandex")
                yandex_response = get_yandex_claim_info(claim_id)
                if yandex_response:
                    courier_info = get_courier_info(claim_id, yandex_response)
                    add_note_to_amocrm(lead_id, f"–ö—É—Ä—å–µ—Ä: {courier_info['courier_name']}, –¢–µ–ª–µ—Ñ–æ–Ω: {courier_info['courier_phone']}, –û–∂–∏–¥–∞–Ω–∏–µ: {courier_info['eta_minutes']} –º–∏–Ω", "Yandex")
                else:
                    logging.warning(f"‚ö†Ô∏è Failed to get courier info for delivery {claim_id}")
                    add_note_to_amocrm(lead_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞", "Yandex")

            # Check for final delivery completion
            if status == "delivered_finish":
                logging.info(f"‚úÖ Delivery {claim_id} has been completed.")
                add_note_to_amocrm(lead_id, f"–î–æ—Å—Ç–∞–≤–∫–∞ {claim_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "Yandex")
                update_lead_status_in_amocrm(lead_id, 142)  # Status "Closed"
                return True

            elif status:
                logging.info(f"üöö Current status of delivery {claim_id}: {status}")
            else:
                logging.warning(f"‚ö†Ô∏è Could not fetch status for delivery {claim_id} on attempt {attempt + 1}.")

            await asyncio.sleep(WAIT_TIME)
        except Exception as e:
            logging.error(f"‚ùå Exception while tracking Yandex delivery: {str(e)}")
            add_note_to_amocrm(lead_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ø–Ω–¥–µ–∫—Å: {str(e)}", "Yandex")

    logging.error(f"‚ùå Failed to confirm delivery completion for {claim_id} after {MAX_RETRIES} attempts.")
    add_note_to_amocrm(lead_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫", "Yandex")
    return False

    
def get_courier_phone(claim_id: str, point_id: int) -> str:
    """
    Retrieves the phone number of the courier via the driver-voiceforwarding endpoint.
    """
    try:
        url = f"{YANDEX_BASE_URL}/driver-voiceforwarding"
        headers = {
            "Authorization": f"Bearer {YANDEX_API_KEY}",
            "Accept-Language": "ru",
            "Content-Type": "application/json"
        }
        payload = {
            "claim_id": claim_id,
            "point_id": point_id
        }

        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        phone_data = response.json()

        phone_number = phone_data.get("phone", "Unknown")
        extension = phone_data.get("ext", "")

        if extension:
            phone_number += f" –¥–æ–±. {extension}"

        logging.info(f"‚úÖ Courier phone number retrieved: {phone_number}")
        return phone_number

    except requests.RequestException as e:
        logging.error(f"‚ùå Network error while fetching courier phone: {str(e)}")
        return "Unknown"
    except Exception as e:
        logging.error(f"‚ùå Unexpected error while fetching courier phone: {str(e)}")
        return "Unknown"
    
def get_courier_info(claim_id: str, response_data: dict) -> dict:
    """
    Extracts the courier information from the Yandex delivery response.
    """
    try:
        performer_info = response_data.get("performer_info", {})
        courier_name = performer_info.get("courier_name", "Unknown")
        current_point_id = response_data.get("current_point_id")

        # Check if current_point_id exists and find the corresponding route point
        point_id = None
        if current_point_id:
            route_points = response_data.get("route_points", [])
            for point in route_points:
                if point.get("id") == current_point_id:
                    point_id = point.get("id")
                    break
        
        if not point_id:
            logging.error(f"‚ùå No matching route point found for current_point_id: {current_point_id}")
            point_id = 0

        # Fetch courier phone using the helper function
        courier_phone = get_courier_phone(claim_id, point_id)

        # Extract the 'due' field and calculate minutes to arrival
        due_str = response_data.get("due")
        if due_str:
            try:
                due_time = datetime.fromisoformat(due_str.replace("Z", "+00:00"))
                now = datetime.now(timezone.utc)
                minutes_to_arrival = int((due_time - now).total_seconds() / 60)
                if minutes_to_arrival < 0:
                    minutes_to_arrival = 0
            except Exception as e:
                logging.error(f"‚ùå Error parsing 'due' time: {str(e)}")
                minutes_to_arrival = "Unknown"
        else:
            minutes_to_arrival = "Unknown"

        pricing = response_data.get("pricing", {}).get("offer", {})
        price = float(pricing.get("price", 0)) or float(pricing.get("price_raw", 0))
        currency = response_data.get("pricing", {}).get("currency", "KZT")
        formatted_price = format_price(price, currency)

        logging.info(f"‚úÖ Courier info: Name: {courier_name}, Phone: {courier_phone}, ETA: {minutes_to_arrival} minutes, Price: {formatted_price}")

        return {
            "courier_name": courier_name,
            "courier_phone": courier_phone,
            "eta_minutes": minutes_to_arrival,
            "price": formatted_price
        }

    except Exception as e:
        logging.error(f"‚ùå Error extracting courier info: {str(e)}")
        return {
            "courier_name": "Unknown",
            "courier_phone": "Unknown",
            "eta_minutes": "Unknown",
            "price": "Unknown Price"
        }
    
def get_yandex_claim_info(claim_id: str) -> dict:
    try:
        url = f"{YANDEX_BASE_URL}/claims/info?claim_id={claim_id}"
        headers = {
            "Authorization": f"Bearer {YANDEX_API_KEY}",
            "Accept-Language": "ru"
        }
        response = requests.post(url, headers=headers)
        response.raise_for_status()
        logging.info(f"‚úÖ Successfully fetched claim info for {claim_id}")
        return response.json()
    except requests.RequestException as e:
        logging.error(f"‚ùå Network error while fetching claim info: {str(e)}")
        return {}
    except Exception as e:
        logging.error(f"‚ùå Unexpected error while fetching claim info: {str(e)}")
        return {}
    
def format_price(price: float, currency: str = "KZT") -> str:
    """
    Formats the price for display in AmoCRM.
    """
    try:
        return f"{round(price, 2)} {currency}"
    except Exception as e:
        logging.error(f"‚ùå Error formatting price: {str(e)}")
        return "Unknown Price"

def track_yandex_delivery_sync(claim_id, lead_id):
    MAX_RETRIES = 180      # e.g. 20 attempts
    WAIT_TIME = 30        # e.g. 60 seconds between checks
    have_tracking_links = False
    courier_info_fetched = False
    last_status = None

    for attempt in range(MAX_RETRIES):
        try:
            # Fetch the current status once per iteration
            status = get_yandex_delivery_status(claim_id)
            
            # Log the status change (or any new status if first iteration)
            if status and status != last_status:
                logging.info(f"üöö Status changed to '{status}' for claim {claim_id}.")
                status_message = get_status_message_russian(status)
                add_note_to_amocrm(lead_id, f"–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω: {status_message}", "Yandex")
                last_status = status

            if not have_tracking_links:
                    links = get_yandex_tracking_links(claim_id)
                    if links:
                        have_tracking_links = True
                        for link in links:
                            add_note_to_amocrm(lead_id, f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {link}")
                        logging.info(f"üöö Tracking links found: {links}")

            if not courier_info_fetched and status in ["performer_found", "pickup_arrived", "pickuped"]:
                    yandex_response = get_yandex_claim_info(claim_id)
                    if yandex_response:
                        courier_info = get_courier_info(claim_id, yandex_response)
                        add_note_to_amocrm(
                            lead_id,
                            f"–ö—É—Ä—å–µ—Ä: {courier_info['courier_name']}, –¢–µ–ª–µ—Ñ–æ–Ω: {courier_info['courier_phone']}, "
                            f"–ü—Ä–∏–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑: {courier_info['eta_minutes']} –º–∏–Ω"
                        )
                        courier_info_fetched = True
            
            if status == "delivered_finish":
                logging.info(f"‚úÖ Delivery {claim_id} completed.")
                add_note_to_amocrm(lead_id, f"–î–æ—Å—Ç–∞–≤–∫–∞ {claim_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "Yandex")
                return True
                
            if status == "cancelled_by_taxi":
                logging.warning(f"‚ùå Cancelled by taxi driver: {claim_id}. Checking if auto-resumed.")
                add_note_to_amocrm(lead_id, f"–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫—É—Ä—å–µ—Ä–æ–º: {claim_id}", "Yandex")
                time.sleep(WAIT_TIME)
                continue  # Check if the status changes

            if status in ["returning", "return_arrived"]:
                logging.info(f"üîÑ Returning package: {claim_id}.")
                add_note_to_amocrm(lead_id, f"–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å: {claim_id}", "Yandex")

            if status in ["returned", "returned_finish"]:
                logging.info(f"üîÅ Return completed: {claim_id}.")
                add_note_to_amocrm(lead_id, f"–í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {claim_id}", "Yandex")
                return False

            # Log any failure to fetch status
            if status is None:
                logging.warning(f"‚ö†Ô∏è Could not fetch status for delivery {claim_id}, attempt {attempt+1} of {MAX_RETRIES}.")

            # Sleep before the next retry
            time.sleep(WAIT_TIME)

        except Exception as e:
            logging.error(f"‚ùå Error in track_yandex_delivery_sync: {e}")
            add_note_to_amocrm(lead_id, f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ø–Ω–¥–µ–∫—Å: {str(e)}", "Yandex")
            continue

    # If we exit the loop without successful completion
    logging.error(f"‚ùå Delivery {claim_id} was not completed after {MAX_RETRIES} checks.")
    add_note_to_amocrm(lead_id, f"–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫.", "Yandex")
    return False

def try_accept_yandex_delivery(claim_id, lead_id, retries=5, wait_time=2):
    for attempt in range(retries):
        try:
            status = get_yandex_delivery_status(claim_id)
            if status == "ready_for_approval":
                if accept_yandex_delivery(claim_id, lead_id):
                    return True
            elif status in ["performer_lookup", "performer_found"]:
                return True
            time.sleep(wait_time)
        except Exception as e:
            logging.error(f"‚ùå Error accepting Yandex delivery: {str(e)}")
    return False

def get_status_message_russian(status):
    status_messages = {
        "new": "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞.",
        "estimating": "–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–∫–∏: –ø–æ–¥–±–æ—Ä —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Ç–æ–≤–∞—Ä–∞ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏.",
        "ready_for_approval": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ü–µ–Ω–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        "accepted": "–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.",
        "performer_lookup": "–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞.",
        "performer_draft": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ –∫—É—Ä—å–µ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤ –∑–∞—è–≤–∫–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.",
        "performer_found": "–ö—É—Ä—å–µ—Ä –Ω–∞–π–¥–µ–Ω –∏ –µ–¥–µ—Ç –∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (—Ç–æ—á–∫–∞ –ê).",
        "pickup_arrived": "–ö—É—Ä—å–µ—Ä –ø—Ä–∏–µ—Ö–∞–ª –≤ —Ç–æ—á–∫—É –ê, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑.",
        "ready_for_pickup_confirmation": "–ö—É—Ä—å–µ—Ä –∂–¥–µ—Ç, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–∞–∑–æ–≤–µ—Ç –µ–º—É –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        "pickuped": "–ö—É—Ä—å–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.",
        "delivery_arrived": "–ö—É—Ä—å–µ—Ä –ø—Ä–∏–µ—Ö–∞–ª –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é (—Ç–æ—á–∫–∞ –ë).",
        "ready_for_delivery_confirmation": "–ö—É—Ä—å–µ—Ä –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—é. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        "pay_waiting": "–ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.",
        "delivered": "–ö—É—Ä—å–µ—Ä –ø–µ—Ä–µ–¥–∞–ª —Ç–æ–≤–∞—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—é. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.",
        "delivered_finish": "–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏–ª –≤—Å–µ —Ç–æ–≤–∞—Ä—ã.",
        "returning": "–ö—É—Ä—å–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é.",
        "return_arrived": "–ö—É—Ä—å–µ—Ä –ø—Ä–∏–µ—Ö–∞–ª –≤ —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        "ready_for_return_confirmation": "–ö—É—Ä—å–µ—Ä –∂–¥–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        "returned": "–ö—É—Ä—å–µ—Ä –≤–µ—Ä–Ω—É–ª —Ç–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é. –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
        "returned_finish": "–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ç–æ–≤–∞—Ä–∞.",
        "cancelled_by_taxi": "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∫—É—Ä—å–µ—Ä–æ–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.",
        "failed": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."
    }
    return status_messages.get(status, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {status}")
